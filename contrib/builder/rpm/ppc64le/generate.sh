#!/bin/bash
set -e

# usage: ./generate.sh [versions]
#    ie: ./generate.sh
#        to update all Dockerfiles in this directory
#    or: ./generate.sh
#        to only update fedora-23/Dockerfile
#    or: ./generate.sh fedora-newversion
#        to create a new folder and a Dockerfile within it

cd "$(dirname "$(readlink -f "$BASH_SOURCE")")"

versions=( "$@" )
if [ ${#versions[@]} -eq 0 ]; then
	versions=( */ )
fi
versions=( "${versions[@]%/}" )

for version in "${versions[@]}"; do
	distro="${version%-*}"
	suite="${version##*-}"
	from="${distro}:${suite}"
	installer=yum
	if [[ "$distro" == "fedora" ]]; then
		installer=dnf
	fi

	mkdir -p "$version"
	echo "$version -> FROM $from"
	cat > "$version/Dockerfile" <<-EOF
		#
		# THIS FILE IS AUTOGENERATED; SEE "contrib/builder/rpm/ppc64le/generate.sh"!
		#

		FROM ppc64le/$from
	EOF

	echo >> "$version/Dockerfile"

	extraBuildTags='pkcs11'
	runcBuildTags=

    if [[ "$distro" == "fedora" ]]; then
        # The dnf config in the feodra image has a weird proxy line that breaks yum/dnf
        echo 'RUN sed -i "s|proxy=http://proxy:3128||" /etc/dnf/dnf.conf' >> "$version/Dockerfile"
    fi

	case "$from" in
		# add centos and opensuse tools install bits later
		*)
			echo "RUN ${installer} install -y @development-tools fedora-packager" >> "$version/Dockerfile"
			;;
	esac

	# this list is sorted alphabetically; please keep it that way
	packages=(
		btrfs-progs-devel # for "btrfs/ioctl.h" (and "version.h" if possible)
		device-mapper-devel # for "libdevmapper.h"
		glibc-static
		libseccomp-devel # for "seccomp.h" & "libseccomp.so"
		libselinux-devel # for "libselinux.so"
		libtool-ltdl-devel # for pkcs11 "ltdl.h"
		pkgconfig # for the pkg-config command
		selinux-policy
		selinux-policy-devel
		sqlite-devel # for "sqlite3.h"
		systemd-devel # for "sd-journal.h" and libraries
		tar # older versions of dev-tools do not have tar
		git # required for containerd and runc clone
	)

	# opensuse does not have the right libseccomp libs
	case "$from" in
		# add opensuse libseccomp package substitution when adding build support
		*)
			extraBuildTags+=' seccomp'
			runcBuildTags="seccomp selinux"
			;;
	esac

	case "$from" in
		# add opensuse btrfs package substitution when adding build support
		*)
			echo "RUN ${installer} install -y ${packages[*]}" >> "$version/Dockerfile"
			;;
	esac

	echo >> "$version/Dockerfile"

	echo "# Install Go" >> "$version/Dockerfile"
	echo "# go doesn't currently ship in any of the deb-based distros that ship docker for ppc64le, so just bootstrap" >> "$version/Dockerfile"
    echo "# GO_VERSION using IBM AT9's version." >> "$version/Dockerfile"

	case  "$from" in
        fedora:*)
            echo 'RUN curl -fSL ftp://ftp.unicamp.br/pub/linuxpatch/toolchain/at/redhat/Fedora22/at9.0/advance-toolchain-at9.0-golang-9.0-3.ppc64le.rpm -o at9-golang.ppc64le.rpm \' >> "$version/Dockerfile"
            echo '    && dnf install -y at9-golang.ppc64le.rpm \' >> "$version/Dockerfile"
            echo '    && rm -f at9-golang.ppc64le.rpm' >> "$version/Dockerfile"
            echo 'ENV PATH=/usr/local/go/bin:$PATH' >> "$version/Dockerfile"
            ;;
	esac

    echo >> "$version/Dockerfile"

	echo "# NOTE: ppc64le has compatibility issues with older versions of go, so make sure the version >= 1.6" >> "$version/Dockerfile"
    awk '$1 == "ENV" && $2 == "GO_VERSION" { print; exit }' ../../../../Dockerfile >> "$version/Dockerfile"
	echo 'ENV GO_DOWNLOAD_URL "https://storage.googleapis.com/golang/go${GO_VERSION}.src.tar.gz"' >> "$version/Dockerfile"
	echo 'ENV GOROOT_BOOTSTRAP /usr/local/go' >> "$version/Dockerfile"
	echo >> "$version/Dockerfile"

    # We can't install to the same destination as our current bootstrap, so build in tmp using GOROOT_FINAL.
    echo 'RUN curl -fsSL "$GO_DOWNLOAD_URL" -o golang.tar.gz \' >> "$version/Dockerfile"
    echo '  && tar -C /tmp -xzf golang.tar.gz \' >> "$version/Dockerfile"
    echo '  && rm golang.tar.gz \' >> "$version/Dockerfile"
    echo '  && cd /tmp/go/src && GOROOT_FINAL=/usr/local/go ./make.bash 2>&1 \' >> "$version/Dockerfile"
    echo '  && yum remove -y advance-toolchain-at9.0-golang \' >> "$version/Dockerfile"
    echo '  && mv /tmp/go /usr/local/' >> "$version/Dockerfile"
    echo >> "$version/Dockerfile"

    echo 'ENV GOPATH /go:/go/src/github.com/docker/docker/vendor/' >> "$version/Dockerfile"

	echo >> "$version/Dockerfile"

	# print build tags in alphabetical order
	buildTags=$( echo "selinux $extraBuildTags" | xargs -n1 | sort -n | tr '\n' ' ' | sed -e 's/[[:space:]]*$//' )

	echo "ENV DOCKER_BUILDTAGS $buildTags" >> "$version/Dockerfile"
	echo "ENV RUNC_BUILDTAGS $runcBuildTags" >> "$version/Dockerfile"
	echo >> "$version/Dockerfile"

done
